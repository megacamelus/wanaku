/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * wanaku-router API
 * OpenAPI spec version: 0.0.2-SNAPSHOT
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  GetApiV1ManagementTargetsResourcesList200,
  GetApiV1ManagementTargetsToolsList200,
  PutApiV1ManagementTargetsResourcesConfigureServiceParams,
  PutApiV1ManagementTargetsResourcesLinkParams,
  PutApiV1ManagementTargetsResourcesUnlinkParams,
  PutApiV1ManagementTargetsToolsConfigureServiceParams,
  PutApiV1ManagementTargetsToolsLinkParams,
  PutApiV1ManagementTargetsToolsUnlinkParams,
  PutApiV1ResourcesRemoveParams,
  PutApiV1ToolsRemoveParams,
  ResourceReference,
  ToolReference,
} from "../models";

/**
 * @summary Resources Configure
 */
export const putApiV1ManagementTargetsResourcesConfigureService = <
  TData = AxiosResponse<void>,
>(
  service: string,
  params?: PutApiV1ManagementTargetsResourcesConfigureServiceParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(
    `/api/v1/management/targets/resources/configure/${service}`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * @summary Resources Link
 */
export const putApiV1ManagementTargetsResourcesLink = <
  TData = AxiosResponse<void>,
>(
  params?: PutApiV1ManagementTargetsResourcesLinkParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(
    `/api/v1/management/targets/resources/link`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * @summary Resources List
 */
export const getApiV1ManagementTargetsResourcesList = <
  TData = AxiosResponse<GetApiV1ManagementTargetsResourcesList200>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(
    `/api/v1/management/targets/resources/list`,
    options,
  );
};

/**
 * @summary Resources Unlink
 */
export const putApiV1ManagementTargetsResourcesUnlink = <
  TData = AxiosResponse<void>,
>(
  params?: PutApiV1ManagementTargetsResourcesUnlinkParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(
    `/api/v1/management/targets/resources/unlink`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * @summary Tools Configure
 */
export const putApiV1ManagementTargetsToolsConfigureService = <
  TData = AxiosResponse<void>,
>(
  service: string,
  params?: PutApiV1ManagementTargetsToolsConfigureServiceParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(
    `/api/v1/management/targets/tools/configure/${service}`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * @summary Tools Link
 */
export const putApiV1ManagementTargetsToolsLink = <TData = AxiosResponse<void>>(
  params?: PutApiV1ManagementTargetsToolsLinkParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(`/api/v1/management/targets/tools/link`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Tool List
 */
export const getApiV1ManagementTargetsToolsList = <
  TData = AxiosResponse<GetApiV1ManagementTargetsToolsList200>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/v1/management/targets/tools/list`, options);
};

/**
 * @summary Tools Unlink
 */
export const putApiV1ManagementTargetsToolsUnlink = <
  TData = AxiosResponse<void>,
>(
  params?: PutApiV1ManagementTargetsToolsUnlinkParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(
    `/api/v1/management/targets/tools/unlink`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * @summary Expose
 */
export const postApiV1ResourcesExpose = <TData = AxiosResponse<void>>(
  resourceReference: ResourceReference,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(
    `/api/v1/resources/expose`,
    resourceReference,
    options,
  );
};

/**
 * @summary List
 */
export const getApiV1ResourcesList = <
  TData = AxiosResponse<ResourceReference[]>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/v1/resources/list`, options);
};

/**
 * @summary Remove
 */
export const putApiV1ResourcesRemove = <TData = AxiosResponse<void>>(
  params?: PutApiV1ResourcesRemoveParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(`/api/v1/resources/remove`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Add
 */
export const postApiV1ToolsAdd = <TData = AxiosResponse<void>>(
  toolReference: ToolReference,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/v1/tools/add`, toolReference, options);
};

/**
 * @summary List
 */
export const getApiV1ToolsList = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/v1/tools/list`, options);
};

/**
 * @summary Remove
 */
export const putApiV1ToolsRemove = <TData = AxiosResponse<void>>(
  params?: PutApiV1ToolsRemoveParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(`/api/v1/tools/remove`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export type PutApiV1ManagementTargetsResourcesConfigureServiceResult =
  AxiosResponse<void>;
export type PutApiV1ManagementTargetsResourcesLinkResult = AxiosResponse<void>;
export type GetApiV1ManagementTargetsResourcesListResult =
  AxiosResponse<GetApiV1ManagementTargetsResourcesList200>;
export type PutApiV1ManagementTargetsResourcesUnlinkResult =
  AxiosResponse<void>;
export type PutApiV1ManagementTargetsToolsConfigureServiceResult =
  AxiosResponse<void>;
export type PutApiV1ManagementTargetsToolsLinkResult = AxiosResponse<void>;
export type GetApiV1ManagementTargetsToolsListResult =
  AxiosResponse<GetApiV1ManagementTargetsToolsList200>;
export type PutApiV1ManagementTargetsToolsUnlinkResult = AxiosResponse<void>;
export type PostApiV1ResourcesExposeResult = AxiosResponse<void>;
export type GetApiV1ResourcesListResult = AxiosResponse<ResourceReference[]>;
export type PutApiV1ResourcesRemoveResult = AxiosResponse<void>;
export type PostApiV1ToolsAddResult = AxiosResponse<void>;
export type GetApiV1ToolsListResult = AxiosResponse<void>;
export type PutApiV1ToolsRemoveResult = AxiosResponse<void>;
